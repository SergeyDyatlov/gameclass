{*******************************************************}
{                                                       }
{                       EhLib 10.0                      }
{                                                       }
{            Planner CalendarPicker Component           }
{                                                       }
{    Copyright (c) 2014-2020 by Dmitry V. Bolshakov     }
{                                                       }
{*******************************************************}

{$I EhLib.Inc}

unit PlannerCalendarPickerEh;

interface

uses
  SysUtils, Messages, Controls, Forms, StdCtrls, TypInfo,
  DateUtils, ExtCtrls, Buttons, Dialogs,
  Contnrs, Variants, Types, Themes,
  {$IFDEF EH_LIB_17} System.UITypes, System.Generics.Collections, {$ENDIF}
  {$IFDEF FPC}
    EhLibLCL, LMessages, LCLType,
    {$IFDEF FPC_CROSSP}
    {$ELSE}
      Windows,
    {$ENDIF}
  {$ELSE}
    EhLibVCL, Windows, UxTheme,
  {$ENDIF}
  Classes, PlannerDataEh, SpreadGridsEh, PlannersEh,
  GridsEh, ToolCtrlsEh, Graphics;

type
  TCustomCalendarMonthViewEh = class;
  TPlannerCalendarPickerEh = class;

{ TCalPickCellEh }

  TCalPickCellEh = class(TSpreadGridCellEh)
  private
    FHasPlanEvents: Boolean;
  public
    procedure Clear; override;
    property HasPlanEvents: Boolean read FHasPlanEvents write FHasPlanEvents;
  end;

  TCalendarMonthPickerButtonKindEh = (cmpkPriorMonthEh, cmpkNextMonthEh);

{ TCalendarMonthPickerButtonEh }

  TCalendarMonthPickerButtonEh = class(TSpeedButtonEh)
  private
    FKind: TCalendarMonthPickerButtonKindEh;
    function GetMonthPicker: TCustomCalendarMonthViewEh;
    procedure SeKind(const Value: TCalendarMonthPickerButtonKindEh);

    procedure CMMouseEnter(var Message: TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
  protected
    FMouseInControl: Boolean;
    procedure Paint; override;
  public
    constructor Create(AOwner: TComponent); override;

    procedure EditButtonDown(ButtonNum: Integer; var AutoRepeat: Boolean); override;
    procedure MouseDown(Button: TMouseButton; Shift: TShiftState; X, Y: Integer); override;

    property MonthPicker: TCustomCalendarMonthViewEh read GetMonthPicker;
    property Kind: TCalendarMonthPickerButtonKindEh read FKind write SeKind;
  end;

  TCalendarMonthViewOptionEh = (clvFillTopDatesRowEh, clvFillBottomDatesRowEh,
    cmvShowPriorMonthButtonEh, cmvShowNextMonthButtonEh);
  TCalendarMonthViewOptionsEh = set of TCalendarMonthViewOptionEh;

{ TCustomCalendarMonthViewEh }

  TCustomCalendarMonthViewEh = class(TCustomSpreadGridEh, ISimpleChangeNotificationEh)
  private
    FBackButton: TCalendarMonthPickerButtonEh;
    FDate: TDateTime;
    FFirstWeekDayNum: Integer;
    FForwardButton: TCalendarMonthPickerButtonEh;
    FMaxDate: TDateTime;
    FMinDate: TDateTime;
    FOptions: TCalendarMonthViewOptionsEh;
    FStartDataRow: Integer;
    FStartDate: TDateTime;

    function AdjustDateToStartForGrid(ADateTime: TDateTime): TDateTime;
    function GetCalendarPicker: TPlannerCalendarPickerEh;
    function GetCell(ACol, ARow: Integer): TCalPickCellEh;
    function GetCurrentMonth: Integer;
    function GetEndDate: TDateTime;
    function GetMonth: TDateTime;
    function GetPlannerControl: TPlannerControlEh;
    function GetPlannerDataSource: TPlannerDataSourceEh;

    procedure ISimpleChangeNotificationEh.Change = PlannerDataSourceChange;

    procedure PlannerDataSourceChange(Sender: TObject); virtual;
    procedure PlannerDataSourceChanged;
    procedure SetDate(const Value: TDateTime);
    procedure SetMonth(const Value: TDateTime);
    procedure SetOptions(const Value: TCalendarMonthViewOptionsEh);

    procedure CMStlyeChange(var Message: TMessage); message CM_STYLECHANGED;
    {$IFDEF FPC}
    {$ELSE}
    procedure CMWinIniChange(var Message: TWMWinIniChange); message CM_WININICHANGE;
    {$ENDIF}

    procedure WMKillFocus(var Msg: TWMKillFocus); message WM_KILLFOCUS;
    procedure WMSetFocus(var Msg: TWMSetFocus); message WM_SETFOCUS;
  protected
    FCellPosUpdating: Boolean;

    function CreateSpreadGridCell(ACol, ARow: Integer): TSpreadGridCellEh; override;
    function SelectCell(ACol, ARow: Longint): Boolean; override;

    function CellToDate(ACol, ARow: Integer): TDateTime;
    function DateToCell(ADateTime: TDateTime): TGridCoord;
    function IsCellSelected(ACol, ARow: Integer): Boolean;
    function IsDateSelected(ADateTime: TDateTime): Boolean;

    procedure CellMouseDown(const Cell: TGridCoord; Button: TMouseButton; Shift: TShiftState; const ACellRect: TRect; const GridMousePos, CellMousePos: TPoint); override;
    procedure CheckDrawCellBorder(ACol, ARow: Integer; BorderType: TGridCellBorderTypeEh; var IsDraw: Boolean; var BorderColor: TColor; var IsExtent: Boolean); override;
    procedure CurrentCellMoved(OldCurrent: TGridCoord); override;
    procedure DrawBottomOutBoundaryData(ARect: TRect); override;
    procedure DrawCell(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); override;
    procedure DrawLeftOutBoundaryData(ARect: TRect); override;
    procedure DrawRightOutBoundaryData(ARect: TRect); override;
    procedure DrawTopOutBoundaryData(ARect: TRect); override;
    procedure KeyDown(var Key: Word; Shift: TShiftState); override;
    procedure Resize; override;

    procedure BuildGrid;
    procedure DateChanged; virtual;
    procedure DrawDayCell(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); virtual;
    procedure DrawEmptyCell(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); virtual;
    procedure DrawMonthNameRow(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); virtual;
    procedure DrawWeekDayNamesCell(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); virtual;
    procedure DrawWeekNum(ACol, ARow: Integer; ARect: TRect; State: TGridDrawState); virtual;
    procedure GetColRowByDate(ADate: TDateTime; var ACol, ARow: Integer); virtual;
    procedure LayoutChanged; virtual;
    procedure MonthChanged; virtual;
    procedure UpdateCellPos; virtual;
    procedure UpdateLocaleInfo;

    property Cell[ACol, ARow: Integer]: TCalPickCellEh read GetCell;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function GetDateAtCell(ACol, ARow: Integer): TDateTime; virtual;
    function SuggestedWidth: Integer; virtual;
    function SuggestedHeight: Integer; virtual;

    procedure NextMonth; virtual;
    procedure PriorMonth; virtual;

    property CalendarPicker: TPlannerCalendarPickerEh read GetCalendarPicker;
    property Date: TDateTime read FDate write SetDate;
    property EndDate: TDateTime read GetEndDate;
    property MaxDate: TDateTime read FMaxDate write FMaxDate;
    property MinDate: TDateTime read FMinDate write FMinDate;
    property Month: TDateTime read GetMonth write SetMonth;
    property Options: TCalendarMonthViewOptionsEh read FOptions write SetOptions;
    property PlannerControl: TPlannerControlEh read GetPlannerControl;
    property PlannerDataSource: TPlannerDataSourceEh read GetPlannerDataSource;
    property StartDate: TDateTime read FStartDate;
  end;

{ TCalendarMonthViewEh }

  TCalendarMonthViewEh = class(TCustomCalendarMonthViewEh)

  end;

{ TCalendarPickerLineParamsEh }

  TCalendarPickerLineParamsEh = class(TPersistent)
  private
    FBrightColor: TColor;
    FCalendarPicker: TPlannerCalendarPickerEh;
    FDarkColor: TColor;

    procedure SetBrightColor(const Value: TColor);
    procedure SetDarkColor(const Value: TColor);

  public
    constructor Create(ACalendarPicker: TPlannerCalendarPickerEh);
    destructor Destroy; override;

    function GetActualBrightColor: TColor; virtual;
    function GetActualDarkColor: TColor; virtual;

  published
    property BrightColor: TColor read FBrightColor write SetBrightColor default clDefault;
    property DarkColor: TColor read FDarkColor write SetDarkColor default clDefault;

  end;

  TPlannerCalendarPickerOptionEh = (pcpoHighlightHolidaysEh,
   pcpoHighlightTodayEh, pcpoShowRefToTodayEh{, pcpoHighlightCurrentTimeEh});
  TPlannerCalendarPickerOptionsEh = set of TPlannerCalendarPickerOptionEh;

{ TPlannerCalendarPickerTodayInfoLabelEh }

  TDateTimePickCalendarTodayInfoLabelEh = class(TSpeedButtonEh)
  private
    function GetCalendarPicker: TPlannerCalendarPickerEh;
  protected

    procedure Paint; override;
  public
    constructor Create(AOwner: TPlannerCalendarPickerEh); reintroduce;

    procedure GetAutoSize(var NewWidth, NewHeight: Integer); virtual;

    property CalendarPicker: TPlannerCalendarPickerEh read GetCalendarPicker;
  end;


{ TPlannerCalendarPickerEh }

  TPlannerCalendarPickerEh = class(TCustomControlEh, IPlannerControlChangeReceiverEh)
  private
    FBorderStyle: TBorderStyle;
    FCalsInCol: Integer;
    FCalsInRow: Integer;
    FCalViews: TObjectListEh;
    FDate: TDateTime;
    FHolidaysFont: TFont;
    FHolidaysFontStored: Boolean;
    FInternalFontSet: Boolean;
    FLineParams: TCalendarPickerLineParamsEh;
    FOptions: TPlannerCalendarPickerOptionsEh;
    FPlannerControl: TPlannerControlEh;
    FStartMonth: TDateTime;
    FTodayInfoLabel: TDateTimePickCalendarTodayInfoLabelEh;

    function GetBorderSize: Integer;
    function GetCalViewCount: Integer;
    function GetCalViews(Index: Integer): TCalendarMonthViewEh;
    function GetStartMonth: TDateTime;
    function GetStopMonth: TDateTime;
    function IsHolidaysFontStored: Boolean;

    procedure IPlannerControlChangeReceiverEh.Change = PlannerDataSourceChange;
    procedure IPlannerControlChangeReceiverEh.GetViewPeriod = GetViewPeriod;
    {$IFDEF FPC}
    procedure SetBorderStyle(const Value: TBorderStyle); reintroduce;
    {$ELSE}
    procedure SetBorderStyle(const Value: TBorderStyle);
    {$ENDIF}
    procedure PlannerDataSourceChange(Sender: TObject); virtual;
    procedure SetDate(const Value: TDateTime);
    procedure SetHolidaysFont(const Value: TFont);
    procedure SetHolidaysFontStored(const Value: Boolean);
    procedure SetLineParams(const Value: TCalendarPickerLineParamsEh);
    procedure SetOptions(const Value: TPlannerCalendarPickerOptionsEh);
    procedure SetPlannerControl(const Value: TPlannerControlEh);
    procedure SetStartMonth(const Value: TDateTime);

    {$IFDEF FPC}
    {$ELSE}
    procedure CMCtl3DChanged(var Message: TMessage); message CM_CTL3DCHANGED;
    {$ENDIF}

    procedure CMFontChanged(var Message: TMessage); message CM_FONTCHANGED;
    procedure CMParentFontChanged(var Message: TMessage); message CM_PARENTFONTCHANGED;
    procedure CMStlyeChange(var Message: TMessage); message CM_STYLECHANGED;

    procedure WMEraseBkgnd(var Message: TWmEraseBkgnd); message WM_ERASEBKGND;

  protected
    FViewPeriodFinish: TDateTime;
    FViewPeriodStart: TDateTime;

    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure Paint; override;
    procedure Resize; override;

    function CreateCalendarView: TCalendarMonthViewEh;
    function GetNavigateButtonBackColor: TColor; virtual;
    function GetMasterFont: TFont; virtual;

    procedure CalViewMouseWheelDown(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean); virtual;
    procedure CalViewMouseWheelUp(Sender: TObject; Shift: TShiftState; MousePos: TPoint; var Handled: Boolean); virtual;
    procedure DrawNavigateButtonGlyph(Canvas: TCanvas; ARect: TRect; ButtonKind: TCalendarMonthPickerButtonKindEh; IsHot: Boolean; BaseColor: TColor); virtual;
    procedure EnsureDataForViewPeriod; virtual;
    procedure GetViewPeriod(var AStartDate, AEndDate: TDateTime); virtual;
    procedure HolidaysFontChanged(Sender: TObject); virtual;
    procedure InternalRefreshFont;
    procedure InvalidateControls; virtual;
    procedure MonthViewFocusChanged(MonthView: TCustomCalendarMonthViewEh; FocusGot: Boolean); virtual;
    procedure PlannerDataSourceChanged; virtual;
    procedure RefreshDefaultHolidaysFont; virtual;
    procedure ResetCalendarViews;
    procedure SetCalViewsCount(Count: Integer);
    procedure SetDateInView; virtual;
    procedure TodayInfoLabelMouseDown(Sender: TObject; TopButton: Boolean; var AutoRepeat: Boolean; var Handled: Boolean); virtual;
    procedure UpdateControls; virtual;
    procedure UpdateDates;
    procedure UpdateStartMonth; virtual;

    property CalViewCount: Integer read GetCalViewCount;
    property CalViews[Index: Integer]: TCalendarMonthViewEh read GetCalViews;

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    function DefaultBrightLineColor: TColor; virtual;
    function DefaultDarkLineColor: TColor; virtual;
    function GetBackColor: TColor; virtual;
    function HasFocusControl: Boolean; virtual;
    function SuggestedHeight(CalendarViewCount: Integer): Integer; virtual;
    function SuggestedWidth(CalendarViewCount: Integer): Integer; virtual;

    procedure InteractiveSetDate(const Value: TDateTime); virtual;
    procedure NextDay; virtual;
    procedure NextMonth; virtual;
    procedure NextWeek; virtual;
    procedure PriorDay; virtual;
    procedure PriorMonth; virtual;
    procedure PriorWeek; virtual;
    procedure RefreshFont; virtual;
    procedure Scroll(MonthCount: Integer); virtual;

    property Date: TDateTime read FDate write SetDate;
    property StartMonth: TDateTime read GetStartMonth write SetStartMonth;
    property StopMonth: TDateTime read GetStopMonth;

  published
    property PlannerControl: TPlannerControlEh read FPlannerControl write SetPlannerControl;
    property Options: TPlannerCalendarPickerOptionsEh read FOptions write SetOptions default [pcpoHighlightHolidaysEh, pcpoHighlightTodayEh, pcpoShowRefToTodayEh];

    property Align;
    property Anchors;
    property BiDiMode;
    property BorderStyle: TBorderStyle read FBorderStyle write SetBorderStyle default bsSingle;
    property Color;
    property Constraints;
    {$IFDEF FPC}
    {$ELSE}
    property Ctl3D default False;
    {$ENDIF}
    property DragCursor;
    property DragKind;
    property DragMode;
    property Enabled;
    property Font;
    property HolidaysFont: TFont read FHolidaysFont write SetHolidaysFont stored IsHolidaysFontStored;
    property HolidaysFontStored: Boolean read FHolidaysFontStored write SetHolidaysFontStored default False;
    property LineParams: TCalendarPickerLineParamsEh read FLineParams write SetLineParams;
    {$IFDEF FPC}
    {$ELSE}
    property ImeMode;
    property ImeName;
    {$ENDIF}
    property ParentBiDiMode;
    {$IFDEF FPC}
    {$ELSE}
    property ParentCtl3D;
    {$ENDIF}
    property ParentColor;
    property ParentFont;
    property ParentShowHint;
    property PopupMenu;
    property ShowHint;
    property TabOrder;
    property TabStop;
{$IFDEF EH_LIB_13}
    property Touch;
{$ENDIF}
    property Visible;
    property OnContextPopup;
    property OnDblClick;
    property OnDragDrop;
    property OnDragOver;
    property OnEndDock;
    property OnEndDrag;
    property OnEnter;
    property OnExit;
{$IFDEF EH_LIB_13}
    property OnGesture;
{$ENDIF}
    property OnKeyDown;
    property OnKeyPress;
    property OnKeyUp;
    property OnMouseDown;
    property OnMouseMove;
    property OnMouseUp;
{$IFDEF EH_LIB_10}
    property OnMouseEnter;
    property OnMouseLeave;
{$ENDIF}
{$IFDEF FPC}
    property OnMouseEnter;
    property OnMouseLeave;
{$ENDIF}
    property OnMouseWheel;
    property OnMouseWheelDown;
    property OnMouseWheelUp;
    property OnStartDock;
    property OnStartDrag;

  end;

{ TPlannerCalendarPickerDrawStyleEh }

  TPlannerCalendarPickerDrawStyleEh = class
  private
    FCachedAdjustHolidayFontColor: TColor;
    FCachedAdjustHolidayFontColorBackColor: TColor;
    FCachedAdjustHolidayFontColorFontColor: TColor;
    FCachedAdjustSelectedHolidayFontColor: TColor;
    FCachedAdjustSelectedHolidayFontColorFontColor: TColor;
    FCachedAdjustSelectedHolidayFontColorSelectedFontColor: TColor;
    FCachedControlBackColor: TColor;
    FCachedControlBackColor1: TColor;
    FCachedControlBackColor2: TColor;
    FHolidayBaseFontColor: TColor;

    function GetBrightLineColor: TColor;
    function GetDarkLineColor: TColor;

  protected
    function GetControlBackColor: TColor; virtual;
    function GetHolidayBaseFontColor: TColor;
    function GetNormalCellFontColor: TColor; virtual;
    function GetSelectedCellBrushColor: TColor; virtual;
    function GetSelectedCellFontColor: TColor; virtual;
    function GetSelectedInactiveCellBrushColor: TColor; virtual;
    function GetSelectedInactiveCellFontColor: TColor; virtual;
    function GetNavigateButtonBackColor: TColor; virtual;

    procedure SetHolidayBaseFontColor(const Value: TColor);

  public
    constructor Create;

    function AdjustHolidayFontColor(BackColor, FontColor: TColor): TColor; virtual;
    function AdjustSelectedHolidayFontColor(BackColor, FontColor, SelectedFontColor: TColor): TColor; virtual;
    function GetActlHolidayBaseFontColor: TColor; virtual;
    function GetNotLoadedDateFontColor(BackColor: TColor): TColor; virtual;

    procedure DrawNavigateButtonGlyph(PlannerCalendarPicker: TPlannerCalendarPickerEh; Canvas: TCanvas; ARect: TRect; ButtonKind: TCalendarMonthPickerButtonKindEh; IsHot: Boolean; BaseColor: TColor; ScaleFactor: Double); virtual;
    procedure SetCalendarFontData(Calendar: TPlannerCalendarPickerEh; MasterFont: TFont; CalendarFont: TFont); virtual;
    procedure SetCalendarWeekNoFontData(Calendar: TPlannerCalendarPickerEh; CalendarFont: TFont; CalendarWeekNoFont: TFont); virtual;

    property BrightLineColor: TColor read GetBrightLineColor;
    property ControlBackColor: TColor read GetControlBackColor;
    property DarkLineColor: TColor read GetDarkLineColor;
    property HolidayBaseFontColor: TColor read GetHolidayBaseFontColor write SetHolidayBaseFontColor;
    property NavigateButtonBackColor: TColor  read GetNavigateButtonBackColor;
    property NormalCellFontColor: TColor read GetNormalCellFontColor;
    property SelectedCellBrushColor: TColor read GetSelectedCellBrushColor;
    property SelectedCellFontColor: TColor read GetSelectedCellFontColor;
    property SelectedInactiveCellBrushColor: TColor read GetSelectedInactiveCellBrushColor;
    property SelectedInactiveCellFontColor: TColor read GetSelectedInactiveCellFontColor;
  end;

function PlannerCalendarPickerDrawStyleEh: TPlannerCalendarPickerDrawStyleEh;
function SetPlannerCalendarPickerDrawStyleEh(DrawStyle: TPlannerCalendarPickerDrawStyleEh): TPlannerCalendarPickerDrawStyleEh;

implementation
